#!/usr/bin/env python
# --------------------------------------------------------------------
#   ####  PPPV                                          ##### 
#   ####  Primitive Program which Plots band for Vasp   ##### 
#   1/8/2012  Kyoo Kim & Prof. CJ Kang. 
#   1/9/2012  k-scale added
# --------------------------------------------------------------------
import sys,os,re,numpy,time,shutil
#sys.path.insert(0,'/usr/local/lib/python2.6/site-packages')
from scipy import *; from pylab import * ;
from numpy import *;
import scipy.interpolate as interpolate
import matplotlib.pyplot as plt
import ast

rcParams['font.family'] = 'monospace'
rcParams['font.size'] = 27
OFFSET = 0

#-----------FUNCTIONS-----------------------------------------------------------------------------------------
def is_valid_file(filename):
    "check existance of file."
    if (os.path.isfile(filename)==False) or os.path.getsize(filename) == 0:
        return False;
    else :
        return True;

def input_template(ofile):
     ofile.write("##===========Input for PPPV ===========================================================\n")
     ofile.write("#GENERIC SETUPS                                                                        \n")
     ofile.write("nkpt_intfac    =   3              # number of interpolated kpts                        \n")
     ofile.write("e_min,e_max,de =  -1.0,3.0,1.0    # energy range for plot , tick interval              \n")
     ofile.write("l_vertical     =  True            # vertical line trigger                              \n")
     ofile.write("##=====================================================================================\n")
     ofile.write("kpathname = [\"X\",\"Gamma\",\"Y\",\"L\", \"Z\", \"N\", \"Gamma\", \"M\", \"R\"]       \n")
     ofile.write("#--------------------------------------------------------------------------------------\n")
     ofile.write("#STYPLE SETUPS                                                                         \n")
     ofile.write("lw_ud     = [ 5.0  , 5.0  ]               # linewidth for u/d bands                    \n")
     ofile.write("col_ud    = [ 'tab:blue' , 'tab:orange' ] # color(and type) of u/d bands               \n")
     ofile.write("alpha0_ud = [ 0.9 , 0.9 ]               # alpha channel for...                       \n")
     ofile.write("col_ef    = 'k-' ; col_ver    = 'k:'      #---------------- for Ef and vertical line   \n")
     ofile.write("lw_ef     = 2.0  ; lw_ver     = 2.0                                                    \n")
     ofile.write("alpha0_ef = 0.5  ; alpha0_ver = 0.5                                                    \n")
     ofile.write("#--------------------------------------------------------------------------------------\n")
     ofile.write("#FIGURE SETUPS                                                                         \n")
     ofile.write("figsize0  = (12, 14)                       # size of figure                             \n")
     ofile.write("dpi0      = 60                            # dots per inch                              \n")
     ofile.write("fsize     = 24                            # font size                                  \n")
     ofile.write("##=====================================================================================\n")
#-----------FUNCTIONS-----------------------------------------------------------------------------------------//

#----------MAIN--------------------------------------------------------
if __name__=='__main__':
    #======================================================
    print "#########################################################"
    print "####  PPPV                                          #####"
    print "####  Primitive Program which Plots band for Vasp   #####"
    print "#####     1/8/2012  Kyoo Kim & Prof. CJ Kang.         ###"
    print "#########################################################"

#-----------INPUT------------------------------------------------------
    inpname="BANDINP"
    iarg=1
    while iarg<len(sys.argv):
        arg=sys.argv[iarg]
        if   arg=='-init' :
             if (is_valid_file(inpname)) :
                shutil.move(inpname,inpname+"_backup")
             ofile= open(inpname, 'w')
             input_template(ofile);
             print "  >>> input template ",inpname," has been generated."
             quit()
        else:     
             print ""
             print ">> PPPV -init       : creats input file template."
             quit()
        iarg+=1

    if (not is_valid_file(inpname)) :
        print "  >>> [ERR] input file dose not exist.    "
        print "  >>>       We prepared a templit for ya. "
        print "  >>>       Please check and edit BANDINP."
        inpfile = open(inpname,'w')
        input_template(inpfile) 
        quit();
    else:   execfile(inpname)
    
#   #======================================================
    ## setting fermi level from ouput
    GREPef="grep 'E-fermi' OUTCAR"
    lineef= os.popen(GREPef).readlines()
    e_fermi=double(lineef[0][10:].split()[0]);
    print "  >>> E-fermi detected : ", e_fermi , "eV"
    #======================================================

#---POSCAR--------------------------------------------------------------------------------
#   # reading POSCAR to get lattice vector > and then get reciprocal lattice vector (bvec)
    poscar    = open('POSCAR')
    avec      = zeros((3,3))
    poslines  = poscar.readlines()
    print "  >>> Band structure for: ",poslines[0] 
    avec[0][:]=double(poslines[2].split())
    avec[1][:]=double(poslines[3].split())
    avec[2][:]=double(poslines[4].split())
    print "  >>> avec is : "; print avec  # arbitrarily scalec avec
    bvec=inv(avec)
    print "  >>> transpose(bvec) is : "; print bvec  # scaled bvec
#-----------------------------------------------------------------------------------------

#----READ EIGENVALUES---------------------------------------------------------------------

    # initialization
    dat                = open('EIGENVAL')
    enetot             = []                      # total space
    ene                = [[],[]]                 # possible spin space
    vlines             = []                      # vertical lines : path separator
    l_counter          = 5                       # swipe header
    klist              = []                      # klist : by length
    kpt_tol            = 0.0001                  # to check duplicated lines : or vertical lines
    kpts_ol            = 2000.0*ones(3)          # assuming 1st kpt is not (2000,2000,2000)
    kpts               = zeros(3)                # kpts initialization
    num_splitter       = 0                       # number of vertical lines which splits k-path
    k_len_accumulated  = 0.0                     # accumulated length along k-path in BZ.
    kpts_norms         = 0                       # increment of each k-path segment
    
    # process header to set calc. type
    lines=dat.readlines()
    numkpt= int(lines[5].split()[1])  # number of kpts
    numban= int(lines[5].split()[2])  # number of bands
    print "  >>> number of kpts  =" ,numkpt
    print "  >>> number of bands =" ,numban
    n_sp=int(lines[0].split()[3])     # to check spin polarized case
    if (n_sp==1) : print "  >>> Non-magnetic case: "
    else         : print "  >>> Magnetic case    : "
    #-----------------
    
    #=====================================================================================================
    # kpoints loop
    #=====================================================================================================
    for i_kpt in range(numkpt):
       unique_kpt=True   
       l_counter=l_counter+2                        # skip empty line and read kpt
       kpts=double(lines[l_counter].split()[0:3])
       
       if(i_kpt!=0):
          kpts_vec=zeros(3)
          kpts_vec[0]=sum(bvec[0]*(kpts-kpts_ol))
          kpts_vec[1]=sum(bvec[1]*(kpts-kpts_ol))
          kpts_vec[2]=sum(bvec[2]*(kpts-kpts_ol))
          kpts_norms=norm(kpts_vec)    ## kpath interval for the 1st segment
       #-----------------splliter checker ------------------
       if(norm(kpts-kpts_ol) < kpt_tol ):          ## VASP specific splitter (duplicated kpt in EIGENVAL)
          print "  >>>  k-path splitter detected :: ",kpts ,"."
          num_splitter=num_splitter+1
          unique_kpt=False 
          vlines.append(k_len_accumulated)
       else:
          k_len_accumulated=k_len_accumulated+kpts_norms
          klist.append(k_len_accumulated)
       #----------------------------------------------------
       kpts_ol=kpts                                ## to check kpts_norm (increment)
       energy_k=[[],[]]
       for i_band in range(numban):
          l_counter=l_counter+1
          for i_sp in range(n_sp):
             energy_k[i_sp].append(double(lines[l_counter].split()[1+i_sp])-e_fermi)
       if(unique_kpt):
          for i_sp in range(n_sp):
             ene[i_sp].append(energy_k[i_sp])
    #=====================================================================================================
    #=====================================================================================================
    for i_sp in range(n_sp):
        enetot.append(transpose(array(ene[i_sp])))

    numkpt=numkpt-num_splitter                     # rule out splitter

    #====================================================================================================
    #  PLOT BANDS
    #=====================================================================================================
    fig, ax = plt.subplots(1, 3, dpi=dpi0, figsize=figsize0, gridspec_kw={'width_ratios': [1, 0.5, 0.5]})
    subplots_adjust(wspace=0)
    
    nkptnew=numkpt*nkpt_intfac
    
    dknew=double(max(klist)-min(klist))/double(nkptnew-1)
    klist_new=arange(double(min(klist)),double(max(klist))+dknew,dknew)         # new mesh for interpolation
    upper = []; lower = []

    for i_sp in range(n_sp):                                                    
       for i_ban in range(numban):                                              
            fat=dict(alpha=alpha0_ud[i_sp])
            tck     =interpolate.splrep(klist,enetot[i_sp][i_ban],s=0)
            ene_new =interpolate.splev(klist_new,tck,der=0) + OFFSET
            upper.append([x for x in ene_new if x > 1 and x < 3])
            lower.append([x for x in ene_new if x > -1 and x < 1.0])

    upper = [x for x in upper if x != []]
    lower = [x for x in lower if x != []]
    max_  = min(min(upper, key=lambda x: x[1]))
    min_  = max(max(lower))

    for i_sp in range(n_sp):                                                    # SPIN LOOP
       print "  >>> spin", i_sp
       for i_ban in range(numban):                                              # BAND LOOP
            fat=dict(alpha=alpha0_ud[i_sp])
            tck     =interpolate.splrep(klist,enetot[i_sp][i_ban],s=0)          # get linear mesh from irregular one
            ene_new =interpolate.splev(klist_new,tck,der=0) + OFFSET            # get interpolated band on new mesh
            if max_ in ene_new:
                ax[0].plot(klist_new[where(ene_new == max_)], max_, 'o', color='tab:red', markersize=36)
                ax[0].text(klist_new[where(ene_new == max_)], max_ - 0.3, 
							'CBM', 
							**{'fontname':'monospace'})
       	    if min_ in ene_new:
                ax[0].plot(klist_new[where(ene_new == min_)], min_, 'o', color='tab:red', markersize=36)
                ax[0].text(klist_new[where(ene_new == min_)], min_ + 0.1, 
							'VBM',
							**{'fontname':'monospace'})
            ax[0].plot(klist_new,ene_new,col_ud[i_sp],linewidth=lw_ud[i_sp],**fat)    # bandwise plot
    
    fat=dict(alpha=alpha0_ef)
    ax[0].plot(klist_new,zeros(shape(klist_new)),col_ef,linewidth=lw_ef,**fat)  # Ef
    
    # tics, vertical lines, ef....
    xx_tic=[];xx_tic.append(0)
    if (l_vertical):
        fat=dict(alpha=alpha0_ver)
        for vline in vlines:
          ax[0].plot((vline,vline),(e_min,e_max),col_ver,linewidth=lw_ver,**fat)
          xx_tic.append(vline)
    xx_tic.append(klist_new[-1])

    # K-PATH-NAMES exception ..... expand for other case....
    for i in range(size(xx_tic)):
        if (kpathname[i][0]=="G" or kpathname[i][0]=="g"): kpathname[i]="$\Gamma$"

    yy_tic=list(arange(e_min,e_max+de,de))
    ax[0].set_xticks(xx_tic)
    ax[0].set_xticklabels(kpathname[0:1+size(xx_tic)]) 
    ax[0].set_yticks(yy_tic) 
    
    ax[0].set_xlim((min(klist_new),max(klist_new)))
    ax[0].set_ylim((e_min,e_max))
    ax[0].set_ylabel(r'Energy[eV]', fontsize=fsize*1.2)   # check figure offset! This does not appear in right position

    #=====================================================================================================
    #  PLOT DOS
    #=====================================================================================================
    nickel = 0

    def plot_dos(material, color, name, n):
    	dos_up = 0; dos_dn = 0;
	for up in range(1, 19, 2):
            dos_up = dos_up + material.T[up]
	for dn in range(2, 20, 2):
	    dos_dn = dos_dn + material.T[dn]

	ax[2].plot(dos_up/n, material.T[0] + OFFSET, color=color, label=name)
	ax[2].plot(dos_dn/n, material.T[0] + OFFSET, color=color)
	ax[2].fill_between(dos_up/n, material.T[0] + OFFSET, hatch='//', facecolor = 'none', edgecolor=color)
    	ax[2].fill_between(dos_dn/n, material.T[0] + OFFSET, hatch='//', facecolor = 'none', edgecolor=color)

    total_dos 	= np.loadtxt('DOS0', dtype=float)
    copper 	= np.loadtxt('DOS48', dtype=float)

    for ni in range(1, 8):
	nickel = nickel + np.loadtxt('DOS%d' % ni, dtype=float)

    nickel = nickel/7

    plot_dos(nickel, 'tab:red', 'Ni-d', 1)
    plot_dos(copper, 'tab:purple', 'Cu', 3)
    ax[1].plot(total_dos.T[1], total_dos.T[0] + OFFSET, color='green')
    ax[1].plot(total_dos.T[2], total_dos.T[0] + OFFSET, color='green', label='Total')
    ax[1].fill_between(total_dos.T[1], total_dos.T[0] + OFFSET, hatch='//', facecolor = 'none', edgecolor='green')
    ax[1].fill_between(total_dos.T[2], total_dos.T[0] + OFFSET, hatch='//', facecolor = 'none', edgecolor='green')
    fig.text(0.575, 0.082, 'DOS [states/eV]')
    ax[1].set_xlim(-30, 30)
    ax[2].set_xlim(-1, 1)

    for i in range(1, 3):
    	ax[i].invert_yaxis()
    	ax[i].set_xticks([])
    	ax[i].set_yticks([])
    	ax[i].set_ylim(-1, 3)
   	ax[i].legend(handlelength=0.5, loc='upper left')

    print "#########################################################"
    print "####  PPPV ends                                     #####"
    print "#########################################################"
    
    savefig("Cu0125NiWO4.pdf", format='pdf', bbox_inches='tight')
    show()
